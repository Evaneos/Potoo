{"version":3,"sources":["browser/webSocket.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,IAAI,MAAM,YAAA,CAAC;;AAEJ,SAAS,EAAE,GAAG;;;AACjB,WAAO,WAAA,MAAM,EAAC,EAAE,MAAA,UAAI,SAAS,CAAC,CAAC;CAClC;;AAEM,SAAS,GAAG,GAAG;;;AAClB,WAAO,YAAA,MAAM,EAAC,GAAG,MAAA,WAAI,SAAS,CAAC,CAAC;CACnC;;AAEM,SAAS,IAAI,GAAG;AACnB,QAAM,IAAI,GAAG,SAAS,CAAC;AACvB,WAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;;AAEtC,WAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;;;AACpC,YAAI,QAAQ,YAAA,CAAC;AACb,oBAAA,MAAM,EAAC,IAAI,MAAA,WAAI,IAAI,SAAE,UAAS,GAAG,EAAE,MAAM,EAAE;AACvC,wBAAY,CAAC,QAAQ,CAAC,CAAC;AACvB,mBAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,SAAS,CAAC,CAAC;AACpD,gBAAI,GAAG,KAAK,IAAI,EAAE;AACd,sBAAM,CAAC,GAAG,CAAC,CAAC;aACf,MAAM;AACH,uBAAO,CAAC,MAAM,CAAC,CAAC;aACnB;SACJ,GAAC,CAAC;AACH,gBAAQ,GAAG,UAAU,CAAC,YAAW;AAC7B,mBAAO,CAAC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAAC,CAAC;AAC9C,kBAAM,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;SAChC,EAAE,KAAK,CAAC,CAAC;KACb,CAAC,CAAC;CACN;;AAEM,SAAS,IAAI,GAAG;;;AACnB,WAAO,YAAA,MAAM,EAAC,IAAI,MAAA,WAAI,SAAS,CAAC,CAAC;CACpC;;AAEM,SAAS,MAAM,GAAG;AACrB,WAAO,aAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,cAAM,GAAG,EAAE,CACP,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,GAAG,GAAG,aAAa,EAC1D;AACI,sBAAU,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC;AACnD,6BAAiB,EAAE,GAAG;AACtB,gCAAoB,EAAE,IAAI;AAC1B,mBAAO,EAAE,IAAI;SAChB,CACJ,CAAC;;AAEF,cAAM,CAAC,EAAE,CAAC,SAAS,EAAE,YAAW;AAC5B,mBAAO,EAAE,CAAC;SACb,CAAC,CAAC;KACN,CAAC,CAAC;CACN","file":"browser/webSocket.js","sourcesContent":["/* global io, webSocketPort */\n\nlet socket;\n\nexport function on() {\n    return socket.on(...arguments);\n}\n\nexport function off() {\n    return socket.off(...arguments);\n}\n\nexport function emit() {\n    const args = arguments;\n    console.log('webSocket [emit]', args);\n\n    return new Promise((resolve, reject) => {\n        let resolved;\n        socket.emit(...args, function(err, result) {\n            clearTimeout(resolved);\n            console.log('webSocket [emit response]', arguments);\n            if (err !== null) {\n                reject(err);\n            } else {\n                resolve(result);\n            }\n        });\n        resolved = setTimeout(function() {\n            console.log('webSocket [emit timeout]', args);\n            reject(new Error('Timeout'));\n        }, 10000);\n    });\n}\n\nexport function send() {\n    return socket.send(...arguments);\n}\n\nexport function create() {\n    return new Promise((resolve, reject) => {\n        socket = io(\n            'http://' + window.location.hostname + ':' + webSocketPort,\n            {\n                transports: ['websocket', 'polling', 'flashsocket'],\n                reconnectionDelay: 500,\n                reconnectionDelayMax: 3000,\n                timeout: 2000\n            }\n        );\n\n        socket.on('connect', function() {\n            resolve();\n        });\n    });\n}\n"],"sourceRoot":"/"}